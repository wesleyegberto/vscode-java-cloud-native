{
	"K8s - Namespace": {
		"prefix": "k8s-namespace",
		"description": "Kubernentes Namespace",
		"body": [
			"apiVersion: v1",
			"kind: Namespace",
			"metadata:",
			"  name: ${1: development}"
		]
	},
	"K8s - Deployment v1": {
		"prefix": "k8s-deploy",
		"description": "Kubernentes deployments with rolling update",
		"body": [
			"apiVersion: apps/v1",
			"kind: Deployment",
			"metadata:",
			"  name: ${1:my-application}",
			"  namespace: default",
			"  labels:",
			"    app: ${1:my-application}",
			"    env: ${2:dev}",
			"spec:",
			"  # remove replicas when using HPA",
			"  replicas: 1",
			"  minReadySeconds: 10",
			"  strategy:",
			"    type: RollingUpdate",
			"    rollingUpdate:",
			"      maxUnavailable: 25%",
			"      maxSurge: 25%",
			"  selector:",
			"    matchLabels:",
			"      app: ${1:my-application}",
			"      env: ${2:dev}",
			"  template:",
			"    metadata:",
			"      labels:",
			"        app: ${1:my-application}",
			"        env: ${2:dev}",
			"    spec:",
			"      containers:",
			"      - name: ${1:my-application}",
			"        image: us.gcr.io/${5:my-project-id/my-company}/${1:my-application}:${4:tag-version}",
			"        env:",
			"        - name: SPRING_PROFILES_ACTIVE",
			"          value: \"${3:development}\"",
			"        # environment from Secret",
			"        - name: ENV_VAR",
			"            valueFrom:",
			"              secretKeyRef:",
			"                name: ${name: secret-name}",
			"                key: ${key: entry-key}",
			"        ports:",
			"        - containerPort: 8080",
			"          name: http",
			"        resources:",
			"          requests:",
			"            cpu: 100m",
			"            memory: 50Mi",
			"          limit:",
			"            cpu: 2000m",
			"            memory: 2000Mi",
			"        readinessProbe:",
			"          httpGet:",
			"            path: /healthy",
			"            port: http",
			"          initialDelaySeconds: 5",
			"          periodSeconds: 20",
			"          timeoutSeconds: 2",
			"          successThreshold: 1",
			"          failureThreshold: 3",
			"          periodSeconds: 10",
			"        livenessProbe:",
			"          httpGet:",
			"            path: /healthy",
			"            port: http",
			"          initialDelaySeconds: 20",
			"          timeoutSeconds: 5",
			"          successThreshold: 1",
			"          failureThreshold: 3",
			"          periodSeconds: 10"
		]
	},
	"K8s - Secret": {
		"prefix": "k8s-secret",
		"description": "Kubernetes Secret",
		"body": [
			"apiVersion: v1",
			"kind: Secret",
			"type: Opaque",
			"metadata:",
			"  name: ${name: secret-name}",
			"  namespace: default",
			"data:",
			"  ${key: secretKey}: ${value: BASE64_ENCODED_VALUE}"
		]
	},
	"K8s - Deployment - Container Environment from Secret": {
		"prefix": "k8s-env-from-secret",
		"description": "Container environment var from Kubernetes Secret",
		"body": [
			"- name: ENV_VAR",
			"    valueFrom:",
			"      secretKeyRef:",
			"        name: ${name: secret-name}",
			"        key: ${key: entry-key}"
		]
	},
	"K8s - Deployment - Container Environment from ConfigMap": {
		"prefix": "k8s-env-from-configmap",
		"description": "Container environment var from Kubernetes ConfigMap",
		"body": [
			"env:",
			"- name: ENV_VAR",
			"    valueFrom:",
			"      configMapRef:",
			"        name: ${name: configmap-name}",
			"        key: ${key: entry-key}",
			"envFrom:",
			"- configMapRef:",
			"  name: ${configmap-name}"
		]
	},
	"K8s - ConfigMap with File": {
		"prefix": "k8s-configmap-file",
		"description": "Configmap that contains a file",
		"body": [
			"apiVersion: v1",
			"kind: ConfigMap",
			"metadata:",
			"  name: ${1:my-application-properties}",
			"  namespace: default",
			"  labels:",
			"    app: ${2:my-application}",
			"    env: ${3:environment}",
			"data:",
			"  application.yaml: |",
			"    key: value"
		]
	},
	"K8s - ConfigMap with Key/Value Pair": {
		"prefix": "k8s-configmap",
		"description": "ConfigMap with a Key/Value pair",
		"body": [
			"apiVersion: v1",
			"kind: ConfigMap",
			"metadata:",
			"  name: ${1:my-application-properties}",
			"  namespace: default",
			"  labels:",
			"    app: ${2:my-application}",
			"    env: ${3:environment}",
			"data:",
			"  my-key: my-value"
		]
	},
	"K8s - ConfigMap with Key/Value from File": {
		"prefix": "k8s-configmap-kv-file",
		"description": "ConfigMap with a Key/Value pair and file",
		"body": [
			"apiVersion: v1",
			"kind: ConfigMap",
			"metadata:",
			"  name: ${1:my-application-properties}",
			"  namespace: default",
			"  labels:",
			"    app: ${2:my-application}",
			"    env: ${3:environment}",
			"data:",
			"  my-key: my-value",
			"  application.yaml: |",
			"    key: value"
		]
	},
	"K8s - File from Secret": {
		"prefix": "k8s-file-from-secret",
		"description": "Mount a file from a Kubernetes Secret",
		"body": [
			"  volumeMounts:",
			"    - mountPath: \"${1: /path/to/filename}\"",
			"      name: ${2: volumeName}",
			"volumes:",
			"  - name: {2: volumeName}",
			"    secret:",
			"      secretName: ${3: secretName}"
		]
	},
	"K8s - Service": {
		"prefix": "k8s-svc",
		"description": "Kubernentes service v1",
		"body": [
			"apiVersion: v1",
			"kind: Service",
			"metadata:",
			"  name: ${1:my-application}",
			"  namespace: default",
			"  labels:",
			"    app: ${1:my-application}",
			"    env: ${2:environment}",
			"spec:",
			"  type: ${3:ClusterIP | NodePort | LoadBalancer}",
			"  selector:",
			"    app: ${1:my-application}",
			"    env: ${2:environment",
			"  ports:",
			"    - protocol: TCP",
			"      name: http",
			"      port: 80",
			"      targetPort: 8080"
		]
	},
	"K8s - Horizontal Pod Autoscaler": {
		"prefix": "k8s-hpa",
		"description": "Kubernentes horizontal pod autoscaler",
		"body": [
			"apiVersion: autoscaling/v2beta1",
			"kind: HorizontalPodAutoscaler",
			"metadata:",
			"  name: ${1:my-application}",
			"  namespace: default",
			"spec:",
			"  scaleTargetRef:",
			"    apiVersion: apps/v1",
			"    kind: Deployment",
			"    name: ${1:my-application}",
			"  minReplicas: 1",
			"  maxReplicas: 3",
			"  metrics:",
			"  - type: Resource",
			"    resource:",
			"      name: cpu",
			"      targetAverageUtilization: ${2:80}"
		]
	},
	"K8s - Ingress Direct Service": {
		"prefix": "k8s-ing-svc",
		"description": "Kubernetes Ingress direct to a Service",
		"body": [
			"apiVersion: networking.k8s.io/v1",
			"kind: Ingress",
			"metadata:",
			"  name: ${1:ingress-name}",
			"  namespace: default",
			"spec:",
			"  defaultBackend:",
			"    service:",
			"      name: ${2:service-name}",
			"      port:",
			"        number: ${3:service-port}"
		]
	},
	"K8s - Ingress Fanout": {
		"prefix": "k8s-ing-fanout",
		"description": "Kubernetes Ingress Fanout",
		"body": [
			"apiVersion: networking.k8s.io/v1",
			"kind: Ingress",
			"metadata:",
			"  name: ${1:ingress-name}",
			"  namespace: default",
			"spec:",
			"  rules:",
			"  - host: ${2:foo.bar.com}",
			"    http:",
			"      paths:",
			"      - path: /foo",
			"        pathType: Prefix",
			"        backend:",
			"          service: ",
			"            name: foo-service",
			"            port:",
			"              number: 80",
			"      - path: /bar",
			"        pathType: Prefix",
			"        backend:",
			"          service: ",
			"            name: bar-service",
			"            port:",
			"              number: 80"
		]
	},
	"K8s - Ingress Named Based": {
		"prefix": "k8s-ing-named-based",
		"description": "Kubernetes Ingress Fanout",
		"body": [
			"apiVersion: networking.k8s.io/v1",
			"kind: Ingress",
			"metadata:",
			"  name: ${1:ingress-name}",
			"  namespace: default",
			"spec:",
			"  rules:",
			"  - host: ${2:foo.com}",
			"    http:",
			"      paths:",
			"      - path: \"/\"",
			"        pathType: Prefix",
			"        backend:",
			"          service: ",
			"            name: foo-service",
			"            port:",
			"              number: 80",
			"  - host: ${3:bar.com}",
			"    http:",
			"      paths:",
			"      - path: \"/\"",
			"        pathType: Prefix",
			"        backend:",
			"          service: ",
			"            name: bar-service",
			"            port:",
			"              number: 80"
		]
	}
}